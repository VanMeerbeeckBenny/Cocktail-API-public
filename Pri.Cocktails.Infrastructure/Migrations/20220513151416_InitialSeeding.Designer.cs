// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pri.Cocktails.Infrastructure.Data;

namespace Pri.Cocktails.Infrastructure.Migrations
{
    [DbContext(typeof(CocktailDbContext))]
    [Migration("20220513151416_InitialSeeding")]
    partial class InitialSeeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CocktailTool", b =>
                {
                    b.Property<int>("CocktailsId")
                        .HasColumnType("int");

                    b.Property<int>("ToolsId")
                        .HasColumnType("int");

                    b.HasKey("CocktailsId", "ToolsId");

                    b.HasIndex("ToolsId");

                    b.ToTable("CocktailTool");

                    b.HasData(
                        new
                        {
                            CocktailsId = 1,
                            ToolsId = 1
                        },
                        new
                        {
                            CocktailsId = 1,
                            ToolsId = 3
                        },
                        new
                        {
                            CocktailsId = 2,
                            ToolsId = 1
                        },
                        new
                        {
                            CocktailsId = 2,
                            ToolsId = 2
                        },
                        new
                        {
                            CocktailsId = 3,
                            ToolsId = 1
                        },
                        new
                        {
                            CocktailsId = 3,
                            ToolsId = 2
                        },
                        new
                        {
                            CocktailsId = 3,
                            ToolsId = 6
                        },
                        new
                        {
                            CocktailsId = 4,
                            ToolsId = 1
                        },
                        new
                        {
                            CocktailsId = 4,
                            ToolsId = 2
                        },
                        new
                        {
                            CocktailsId = 4,
                            ToolsId = 7
                        },
                        new
                        {
                            CocktailsId = 5,
                            ToolsId = 1
                        },
                        new
                        {
                            CocktailsId = 5,
                            ToolsId = 3
                        },
                        new
                        {
                            CocktailsId = 5,
                            ToolsId = 7
                        },
                        new
                        {
                            CocktailsId = 6,
                            ToolsId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "admin",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                            ClaimValue = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "registration-date",
                            ClaimValue = "22-05-13",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "a8005868-9fe2-49d7-bba8-398fb8191988"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                            ClaimValue = "a8005868-9fe2-49d7-bba8-398fb8191988",
                            UserId = "a8005868-9fe2-49d7-bba8-398fb8191988"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "registration-date",
                            ClaimValue = "22-05-13",
                            UserId = "a8005868-9fe2-49d7-bba8-398fb8191988"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Pri.Cocktails.Core.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Streetname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Zeebrugge",
                            Country = "België",
                            HouseNumber = "65",
                            PostalCode = "8380",
                            Streetname = "Evendijk-Oost"
                        },
                        new
                        {
                            Id = 2,
                            City = "Tremelo",
                            Country = "België",
                            HouseNumber = "16B",
                            PostalCode = "3128",
                            Streetname = "Rozendaal"
                        });
                });

            modelBuilder.Entity("Pri.Cocktails.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b",
                            AccessFailedCount = 0,
                            AddressId = 1,
                            ConcurrencyStamp = "1c919f5d-938f-4ddd-83e0-6bd3e215cd92",
                            DateOfBirth = new DateTime(1983, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@cocktails.com",
                            EmailConfirmed = true,
                            Firstname = "Benny",
                            Lastname = "Van Meerbeeck",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@COCKTAILS.COM",
                            NormalizedUserName = "ADMIN@COCKTAILS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED4f1uyt4/Yva4H8rdkw4VirPg8y7sf2qADogDwLkYxzBDEVjq1zKAgtVXE9dWIEuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ed5c643-1d97-4881-be6e-168a625d2cd4",
                            TwoFactorEnabled = false,
                            UserName = "admin@cocktails.com"
                        },
                        new
                        {
                            Id = "a8005868-9fe2-49d7-bba8-398fb8191988",
                            AccessFailedCount = 0,
                            AddressId = 2,
                            ConcurrencyStamp = "fb22ad26-8789-4650-a869-691659d36c61",
                            DateOfBirth = new DateTime(1967, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "arlette@cocktails.com",
                            EmailConfirmed = true,
                            Firstname = "Arlette",
                            Lastname = "Verheugen",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARLETTE@COCKTAILS.COM",
                            NormalizedUserName = "ARLETTE@COCKTAILS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIh6tFcRKJdYBGVMkrm49KvbA4SMPDFYM5RLERlypkVwS12hFiYemygdDRIeARmaiw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aaf34067-c3e4-4959-a7fb-b310fc5dde02",
                            TwoFactorEnabled = false,
                            UserName = "arlette@cocktails.com"
                        });
                });

            modelBuilder.Entity("Pri.Cocktails.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CocktailCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cognac/Brandewijn"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Likeur"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rum"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Tequila"
                        });
                });

            modelBuilder.Entity("Pri.Cocktails.Core.Entities.Cocktail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CocktailCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("GlassTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Instrucktions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Picture")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CocktailCategoryId");

                    b.HasIndex("GlassTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Cocktails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CocktailCategoryId = 1,
                            GlassTypeId = 1,
                            Instrucktions = "Doe het gehakte ij in een mengglas.;Scheck de cognac, appelbrandwijn en vermout erop.;Roer voorzichtig.;schenk het mengsel in een gekoeld cocktailglas.",
                            Name = "Corpse Reviver",
                            Picture = "Corpse Reviver.png",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 2,
                            CocktailCategoryId = 1,
                            GlassTypeId = 2,
                            Instrucktions = "Doe de ingrediënten met ijs in een mengglas.;Roer en scheck het mengels door de strainer in een gekoeld glas",
                            Name = "Adam's Apple",
                            Picture = "Adams apple.png",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 3,
                            CocktailCategoryId = 2,
                            GlassTypeId = 1,
                            Instrucktions = "Wrijf de rand van een cocktailglas in met Drambuie.;Meng de geraspte limoenschil en suiker en draai de rand van het glass door het mengsel.;Roer alle ingrediënten inclusief de rest van het suikermengsel in het met ijs gevulde cocktailglas.;Vul het geheel aan met spuitwater naar smaak.",
                            Name = "Lime Swizzle",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 4,
                            CocktailCategoryId = 2,
                            GlassTypeId = 3,
                            Instrucktions = "Roer de eerste drie ingrediënten met ijs.;Schenk het mengels door een strainer in een whisky-of longdrinkglass,voeg meer ijs toe en vulhet geheel aan met spuitwater naar smaak.;Garneer met een paar frambozen.",
                            Name = "Highland Raider",
                            Picture = "Highland Raider.png",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 5,
                            CocktailCategoryId = 3,
                            GlassTypeId = 2,
                            Instrucktions = "Shake de rum,gin en het ananassap met ijs.;Schenk het mengsel door de strainer in een gekoeld longdrinkglas",
                            Name = "Palm Beach",
                            Picture = "Palm Beach.png",
                            UserId = "a8005868-9fe2-49d7-bba8-398fb8191988"
                        },
                        new
                        {
                            Id = 6,
                            CocktailCategoryId = 4,
                            GlassTypeId = 2,
                            Instrucktions = "Scheck de tequila in een gekoeld longdrinkglas met gehakt ij en vul hem met sinaasappelsap.;Schenk langzaam de grenadine erbij en serveer deze longdrink met een rietje",
                            Name = "Tequila Sunrise",
                            Picture = "Tequila Sunrise.png",
                            UserId = "a8005868-9fe2-49d7-bba8-398fb8191988"
                        });
                });

            modelBuilder.Entity("Pri.Cocktails.Core.Entities.CocktailIngredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("CocktailId")
                        .HasColumnType("int");

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MeasuringUnitId")
                        .HasColumnType("int");

                    b.HasKey("IngredientId", "CocktailId");

                    b.HasIndex("CocktailId");

                    b.HasIndex("MeasuringUnitId");

                    b.ToTable("CocktailIngredient");

                    b.HasData(
                        new
                        {
                            IngredientId = 1,
                            CocktailId = 1,
                            Amount = "2",
                            MeasuringUnitId = 1
                        },
                        new
                        {
                            IngredientId = 2,
                            CocktailId = 1,
                            Amount = "1",
                            MeasuringUnitId = 1
                        },
                        new
                        {
                            IngredientId = 3,
                            CocktailId = 1,
                            Amount = "1",
                            MeasuringUnitId = 1
                        },
                        new
                        {
                            IngredientId = 18,
                            CocktailId = 1,
                            MeasuringUnitId = 4
                        },
                        new
                        {
                            IngredientId = 2,
                            CocktailId = 2,
                            Amount = "2",
                            MeasuringUnitId = 1
                        },
                        new
                        {
                            IngredientId = 5,
                            CocktailId = 2,
                            Amount = "1",
                            MeasuringUnitId = 1
                        },
                        new
                        {
                            IngredientId = 6,
                            CocktailId = 2,
                            Amount = "1",
                            MeasuringUnitId = 1
                        },
                        new
                        {
                            IngredientId = 7,
                            CocktailId = 2,
                            Amount = "1",
                            MeasuringUnitId = 1
                        },
                        new
                        {
                            IngredientId = 4,
                            CocktailId = 2,
                            MeasuringUnitId = 4
                        },
                        new
                        {
                            IngredientId = 8,
                            CocktailId = 3,
                            Amount = "1 1/2",
                            MeasuringUnitId = 1
                        },
                        new
                        {
                            IngredientId = 9,
                            CocktailId = 3,
                            Amount = "1/4",
                            MeasuringUnitId = 3
                        },
                        new
                        {
                            IngredientId = 11,
                            CocktailId = 3,
                            Amount = "1",
                            MeasuringUnitId = 3
                        },
                        new
                        {
                            IngredientId = 10,
                            CocktailId = 3,
                            MeasuringUnitId = 5
                        },
                        new
                        {
                            IngredientId = 4,
                            CocktailId = 3,
                            MeasuringUnitId = 4
                        },
                        new
                        {
                            IngredientId = 12,
                            CocktailId = 3,
                            MeasuringUnitId = 4
                        },
                        new
                        {
                            IngredientId = 8,
                            CocktailId = 4,
                            Amount = "1",
                            MeasuringUnitId = 1
                        },
                        new
                        {
                            IngredientId = 13,
                            CocktailId = 4,
                            Amount = "1",
                            MeasuringUnitId = 1
                        },
                        new
                        {
                            IngredientId = 14,
                            CocktailId = 4,
                            Amount = "1",
                            MeasuringUnitId = 1
                        },
                        new
                        {
                            IngredientId = 4,
                            CocktailId = 4,
                            MeasuringUnitId = 4
                        },
                        new
                        {
                            IngredientId = 12,
                            CocktailId = 4,
                            MeasuringUnitId = 4
                        },
                        new
                        {
                            IngredientId = 15,
                            CocktailId = 4,
                            MeasuringUnitId = 6
                        },
                        new
                        {
                            IngredientId = 16,
                            CocktailId = 5,
                            Amount = "1",
                            MeasuringUnitId = 1
                        },
                        new
                        {
                            IngredientId = 5,
                            CocktailId = 5,
                            Amount = "1",
                            MeasuringUnitId = 1
                        },
                        new
                        {
                            IngredientId = 17,
                            CocktailId = 5,
                            Amount = "1",
                            MeasuringUnitId = 1
                        },
                        new
                        {
                            IngredientId = 4,
                            CocktailId = 5,
                            MeasuringUnitId = 4
                        },
                        new
                        {
                            IngredientId = 19,
                            CocktailId = 6,
                            Amount = "2",
                            MeasuringUnitId = 1
                        },
                        new
                        {
                            IngredientId = 18,
                            CocktailId = 6,
                            MeasuringUnitId = 4
                        },
                        new
                        {
                            IngredientId = 20,
                            CocktailId = 6,
                            MeasuringUnitId = 4
                        },
                        new
                        {
                            IngredientId = 21,
                            CocktailId = 6,
                            Amount = "1",
                            MeasuringUnitId = 1
                        });
                });

            modelBuilder.Entity("Pri.Cocktails.Core.Entities.GlassType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Picture")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("GlassTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cocktailglas",
                            Picture = "Coctail.png"
                        },
                        new
                        {
                            Id = 2,
                            Name = "longdrinkglas",
                            Picture = "Longdrinkglas.png"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Old fashioned-glas",
                            Picture = "Old fashioned-glas.png"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Martiniglas",
                            Picture = "Martiniglas.png"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Champagneglas",
                            Picture = "Champagneglas.png"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Cognacglas",
                            Picture = "Cognacglas.png"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Pousse-caféglas",
                            Picture = "Pousse-caféglas.png"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Shotglas",
                            Picture = "Shotglas.png"
                        });
                });

            modelBuilder.Entity("Pri.Cocktails.Core.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IngredientTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Picture")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IngredientTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IngredientTypeId = 1,
                            Name = "Cognac",
                            Picture = "Cognac.png",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 2,
                            IngredientTypeId = 1,
                            Name = "Appelbrandwijn",
                            Picture = "Appelbrandwijn.png",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 3,
                            IngredientTypeId = 1,
                            Name = "zoete vermout",
                            Picture = "Zoete vermout.png",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 4,
                            IngredientTypeId = 4,
                            Name = "ijs",
                            Picture = "Ijs.png",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 5,
                            IngredientTypeId = 1,
                            Name = "Gin",
                            Picture = "Gin.png",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 6,
                            IngredientTypeId = 1,
                            Name = "Droge vermout",
                            Picture = "Droge Vermout.png",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 7,
                            IngredientTypeId = 1,
                            Name = "Gele Chartreuse",
                            Picture = "Gele Chartreuse.png",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 8,
                            IngredientTypeId = 2,
                            Name = "Drambuie",
                            Picture = "Drambule.png",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 9,
                            IngredientTypeId = 6,
                            Name = "Limoenschil",
                            Picture = "Limoen.png",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 10,
                            IngredientTypeId = 5,
                            Name = "Limoensap",
                            Picture = "Limoensap.png",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 11,
                            IngredientTypeId = 9,
                            Name = "Poedersuiker",
                            Picture = "Poedersuiker.png",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 12,
                            IngredientTypeId = 8,
                            Name = "Spuitwater",
                            Picture = "Spuitwater.png",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 13,
                            IngredientTypeId = 1,
                            Name = "Whisky",
                            Picture = "Whisky.png",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 14,
                            IngredientTypeId = 2,
                            Name = "Glayva",
                            Picture = "Glayva.png",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 15,
                            IngredientTypeId = 6,
                            Name = "Frambozen",
                            Picture = "Frambozen.png",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 16,
                            IngredientTypeId = 1,
                            Name = "Witte rum",
                            Picture = "Witte rum.png",
                            UserId = "a8005868-9fe2-49d7-bba8-398fb8191988"
                        },
                        new
                        {
                            Id = 17,
                            IngredientTypeId = 5,
                            Name = "Ananassap",
                            Picture = "Ananassap.png",
                            UserId = "a8005868-9fe2-49d7-bba8-398fb8191988"
                        },
                        new
                        {
                            Id = 18,
                            IngredientTypeId = 4,
                            Name = "Gehakt ijs",
                            Picture = "Gehakt ijs.png",
                            UserId = "4fc95d11-9c63-4a1c-b34f-b0bcec91a71b"
                        },
                        new
                        {
                            Id = 19,
                            IngredientTypeId = 1,
                            Name = "Witte Tequila",
                            Picture = "Witte Tequila.png",
                            UserId = "a8005868-9fe2-49d7-bba8-398fb8191988"
                        },
                        new
                        {
                            Id = 20,
                            IngredientTypeId = 5,
                            Name = "Sinaasappelsap",
                            Picture = "Fruitsap.png",
                            UserId = "a8005868-9fe2-49d7-bba8-398fb8191988"
                        },
                        new
                        {
                            Id = 21,
                            IngredientTypeId = 7,
                            Name = "Grenadine",
                            Picture = "Grenadine.png",
                            UserId = "a8005868-9fe2-49d7-bba8-398fb8191988"
                        });
                });

            modelBuilder.Entity("Pri.Cocktails.Core.Entities.IngredientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("IngredientTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sterke drank"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Likeur"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bier"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ijs"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Vruchtensap"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Fruit"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Siroop"
                        },
                        new
                        {
                            Id = 8,
                            Name = "koolzuurhoudende dranken"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Suikers"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Room"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Steenvruchten"
                        });
                });

            modelBuilder.Entity("Pri.Cocktails.Core.Entities.MeasuringUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("MeasuringUnits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "deel"
                        },
                        new
                        {
                            Id = 2,
                            Name = "gram"
                        },
                        new
                        {
                            Id = 3,
                            Name = "tl"
                        },
                        new
                        {
                            Id = 4,
                            Name = "eigen voorkeur"
                        },
                        new
                        {
                            Id = 5,
                            Name = "enkele druppels"
                        },
                        new
                        {
                            Id = 6,
                            Name = "enkele"
                        });
                });

            modelBuilder.Entity("Pri.Cocktails.Core.Entities.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Picture")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Tools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Jigger",
                            Picture = "Jigger.png"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Stirrer",
                            Picture = "Stirrer.png"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Shaker",
                            Picture = "Shaker.png"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Maatbeker",
                            Picture = "Maatbeker.png"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ijshamer",
                            Picture = "Ijshamer.png"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Rasper",
                            Picture = "Rasp.png"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Strainer",
                            Picture = "Strainer.png"
                        });
                });

            modelBuilder.Entity("CocktailTool", b =>
                {
                    b.HasOne("Pri.Cocktails.Core.Entities.Cocktail", null)
                        .WithMany()
                        .HasForeignKey("CocktailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pri.Cocktails.Core.Entities.Tool", null)
                        .WithMany()
                        .HasForeignKey("ToolsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Pri.Cocktails.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Pri.Cocktails.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pri.Cocktails.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Pri.Cocktails.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pri.Cocktails.Core.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Pri.Cocktails.Core.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Pri.Cocktails.Core.Entities.Cocktail", b =>
                {
                    b.HasOne("Pri.Cocktails.Core.Entities.Category", "CocktailCategory")
                        .WithMany("Coctails")
                        .HasForeignKey("CocktailCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pri.Cocktails.Core.Entities.GlassType", "Glass")
                        .WithMany("Coctails")
                        .HasForeignKey("GlassTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pri.Cocktails.Core.Entities.ApplicationUser", "User")
                        .WithMany("Cocktails")
                        .HasForeignKey("UserId");

                    b.Navigation("CocktailCategory");

                    b.Navigation("Glass");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pri.Cocktails.Core.Entities.CocktailIngredient", b =>
                {
                    b.HasOne("Pri.Cocktails.Core.Entities.Cocktail", "Cocktail")
                        .WithMany("CocktailIngredient")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pri.Cocktails.Core.Entities.Ingredient", "Ingredient")
                        .WithMany("CocktailIngredient")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pri.Cocktails.Core.Entities.MeasuringUnit", "MeasuringUnit")
                        .WithMany()
                        .HasForeignKey("MeasuringUnitId");

                    b.Navigation("Cocktail");

                    b.Navigation("Ingredient");

                    b.Navigation("MeasuringUnit");
                });

            modelBuilder.Entity("Pri.Cocktails.Core.Entities.Ingredient", b =>
                {
                    b.HasOne("Pri.Cocktails.Core.Entities.IngredientType", "IngredientType")
                        .WithMany("Ingredients")
                        .HasForeignKey("IngredientTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pri.Cocktails.Core.Entities.ApplicationUser", "User")
                        .WithMany("Ingredients")
                        .HasForeignKey("UserId");

                    b.Navigation("IngredientType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pri.Cocktails.Core.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Cocktails");

                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("Pri.Cocktails.Core.Entities.Category", b =>
                {
                    b.Navigation("Coctails");
                });

            modelBuilder.Entity("Pri.Cocktails.Core.Entities.Cocktail", b =>
                {
                    b.Navigation("CocktailIngredient");
                });

            modelBuilder.Entity("Pri.Cocktails.Core.Entities.GlassType", b =>
                {
                    b.Navigation("Coctails");
                });

            modelBuilder.Entity("Pri.Cocktails.Core.Entities.Ingredient", b =>
                {
                    b.Navigation("CocktailIngredient");
                });

            modelBuilder.Entity("Pri.Cocktails.Core.Entities.IngredientType", b =>
                {
                    b.Navigation("Ingredients");
                });
#pragma warning restore 612, 618
        }
    }
}
